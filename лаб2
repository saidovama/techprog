#include <iostream>
using namespace std;

class vect {
private:
    int dim;       
    double* b;     
    int num;       
    static int count; 

public:
    
    vect() : dim(0), b(nullptr) {
        num = ++count;
        cout << "Вектор #" << num << " создан (по умолчанию)." << endl;
    }

    vect(int d) : dim(d) {
        b = new double[dim]{0};
        num = ++count;
        cout << "Вектор #" << num << " создан (размерность " << dim << ")." << endl;
    }

  
    vect(const vect& v) : dim(v.dim) {
        b = new double[dim];
        for (int i = 0; i < dim; i++) b[i] = v.b[i];
        num = ++count;
        cout << "Вектор #" << num << " создан (копия вектора #" << v.num << ")." << endl;
    }

    ~vect() {
        delete[] b;
        cout << "Вектор #" << num << " удален." << endl;
    }

    vect& operator=(const vect& v) {
        if (this != &v) {
            delete[] b;
            dim = v.dim;
            b = new double[dim];
            for (int i = 0; i < dim; i++) b[i] = v.b[i];
        }
        cout << "Вектор #" << num << " = вектору #" << v.num << "." << endl;
        return *this;
    }

  
    vect operator+(const vect& v) {
        vect res(dim);
        for (int i = 0; i < dim; i++) res.b[i] = b[i] + v.b[i];
        cout << "Вектор #" << num << " + вектор #" << v.num << " = вектор #" << res.num << "." << endl;
        return res;
    }

    
    vect operator*(double k) {
        vect res(dim);
        for (int i = 0; i < dim; i++) res.b[i] = b[i] * k;
        cout << "Вектор #" << num << " * " << k << " = вектор #" << res.num << "." << endl;
        return res;
    }

  
    friend vect operator*(double k, const vect& v);
};


vect operator*(double k, const vect& v) {
    vect res(v.dim);
    for (int i = 0; i < v.dim; i++) res.b[i] = v.b[i] * k;
    cout << k << " * вектор #" << v.num << " = вектор #" << res.num << "." << endl;
    return res;
}

int vect::count = 0;

class matr {
   
private:
    int rows, cols;
    double** a;
    int num;
    static int count;

public:
    matr(int r, int c) : rows(r), cols(c) {
        a = new double*[rows];
        for (int i = 0; i < rows; i++) a[i] = new double[cols]{0};
        num = ++count;
        cout << "Матрица #" << num << " создана (" << rows << "x" << cols << ")." << endl;
    }

    ~matr() {
        for (int i = 0; i < rows; i++) delete[] a[i];
        delete[] a;
        cout << "Матрица #" << num << " удалена." << endl;
    }
};

int matr::count = 0;

int main() {
    vect v1(3); // Создается вектор #1
    vect v2(3); // Создается вектор #2
    vect v3 = v1 + v2; // Создается вектор #3

    matr m1(2, 2); // Создается матрица #1
    return 0;
}
